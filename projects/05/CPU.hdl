// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decode instruction
    Mux(a=true, b=instruction[11], sel=instruction[15], out=zx);
    Mux(a=false, b=instruction[10], sel=instruction[15], out=nx);
    Mux(a=true, b=instruction[9], sel=instruction[15], out=zy);
    Mux(a=false, b=instruction[8], sel=instruction[15], out=ny);
    Mux(a=true, b=instruction[7], sel=instruction[15], out=f);
    Mux(a=false, b=instruction[6], sel=instruction[15], out=no);

    Mux(a=true, b=instruction[5], sel=instruction[15], out=writeA);
    Mux(a=false, b=instruction[4], sel=instruction[15], out=writeD);
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);

    Mux(a=false, b=instruction[2], sel=instruction[15], out=jumpLT);
    Mux(a=false, b=instruction[1], sel=instruction[15], out=jumpEQ);
    Mux(a=false, b=instruction[0], sel=instruction[15], out=jumpGT);


    // A Register
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=instructionMuxALUOut);
    ARegister(in=instructionMuxALUOut, load=writeA, out=aReg, out[0..14]=addressM);

    Mux16(a=aReg, b=inM, sel=instruction[12], out=aRegMuxMem);


    // D Register
    DRegister(in=ALUOut, load=writeD, out=dReg);


    // ALU
    ALU(x=dReg, y=aRegMuxMem, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=ALUOut, out=outM, zr=zr, ng=ng);


    // Program Counter
    And(a=jumpLT, b=ng, out=negativeCond);
    And(a=jumpEQ, b=zr, out=zeroCond);

    Or(a=ng, b=zr, out=ngOrZr);
    Not(in=ngOrZr, out=ps);
    And(a=jumpGT, b=ps, out=positiveCond);

    Or(a=negativeCond, b=zeroCond, out=loadPcTemp);
    Or(a=loadPcTemp, b=positiveCond, out=loadPc);

    PC(in=aReg, load=loadPc, inc=true, reset=reset, out[0..14]=pc);
}